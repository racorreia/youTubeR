% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/yt_search.R
\name{yt_search}
\alias{yt_search}
\title{YouTube Search API node}
\usage{
yt_search(
  query = NULL,
  channelId = NULL,
  type = "video",
  location = NULL,
  locationRadius = NULL,
  radiusUnit = NULL,
  regionCode = NULL,
  relevanceLanguage = NULL,
  maxResults = NULL,
  pageToken = NULL,
  publishedAfter = NULL,
  publishedBefore = NULL,
  api.key
)
}
\arguments{
\item{query}{The query parameter specifies the query term to search for. Your request can also use the Boolean NOT (-) and OR (|) operators to exclude videos or to find videos that are associated with one of several search terms. For example, to search for videos matching either "boating" or "sailing", set the q parameter value to boating|sailing. Similarly, to search for videos matching either "boating" or "sailing" but not "fishing", set the q parameter value to boating|sailing -fishing.}

\item{channelId}{The channelId parameter indicates that the API response should only contain resources created by the channel.}

\item{type}{The type parameter restricts a search query to only retrieve a particular type of resource. The value is a comma-separated list of resource types. The default value is "video", but also recognizes "channel" and "playlist".}

\item{location}{The location parameter, in conjunction with the locationRadius and radiusUnit parameters, defines a circular geographic area and also restricts a search to videos that specify, in their metadata, a geographic location that falls within that area. The parameter value is a string that specifies latitude/longitude coordinates e.g. (37.42307,-122.08427).}

\item{locationRadius}{The locationRadius parameter, in conjunction with the location parameter, defines a circular geographic area. The API does not support locationRadius parameter values larger than 1000 kilometers.}

\item{radiusUnit}{Measurement unit for the locationRadius parameter. Valid measurement units are m, km, ft, and mi.}

\item{regionCode}{The regionCode parameter instructs the API to return search results for videos that can be viewed in the specified country. The parameter value is an ISO 3166-1 alpha-2 country code in string format.}

\item{relevanceLanguage}{The relevanceLanguage parameter instructs the API to return search results that are most relevant to the specified language. The parameter value is typically an ISO 639-1 two-letter language code. However, you should use the values zh-Hans for simplified Chinese and zh-Hant for traditional Chinese. Please note that results in other languages will still be returned if they are highly relevant to the search query term.}

\item{maxResults}{The maxResults parameter specifies the maximum number of items that should be returned in the result set. Acceptable values are 0 to 50, inclusive.}

\item{pageToken}{The pageToken parameter identifies a specific page in the result set that should be returned. In an API response, the nextPageToken and prevPageToken properties identify other pages that could be retrieved.}

\item{publishedAfter}{The publishedAfter parameter indicates that the API response should only contain resources created at or after the specified time. Values should be provided in POSIXct or Date format.}

\item{publishedBefore}{The publishedBefore parameter indicates that the API response should only contain resources created before or at the specified time. Values should be provided in POSIXct or Date format.}

\item{api.key}{The api.key parameter species the key used to access the API.}
}
\value{
Returns an object with the API call results.
}
\description{
Access the YouTube Search API node
}
\examples{
\dontrun{
video_search <- yt_search(query = INSERT_QUERY,
                        maxResults = 50,
                        publishedAfter = as.Date("2021/10/01"),
                        api.key = INSERT_API_KEY)
}
}
\seealso{
\code{\link[utils]{URLencode}}
 \code{\link[lubridate]{is.POSIXt}},\code{\link[lubridate]{is.Date}}
 \code{\link[anytime]{iso8601}}
 \code{\link[jsonlite]{toJSON, fromJSON}}
 \code{\link[ISOcodes]{ISO_3166_1}},\code{\link[ISOcodes]{ISO_639_2}}
}
